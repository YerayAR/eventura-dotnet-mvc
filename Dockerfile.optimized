# Multi-stage Dockerfile for Even

tura ASP.NET Core MVC
# Optimized for security, performance, and minimal image size

# Base runtime stage
FROM mcr.microsoft.com/dotnet/aspnet:9.0-alpine AS base
WORKDIR /app

# Create non-root user and install minimal dependencies in single layer
RUN addgroup -g 1001 eventura \
    && adduser -D -u 1001 -G eventura eventura \
    && apk update \
    && apk upgrade \
    && apk add --no-cache curl tzdata \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Set timezone
ENV TZ=UTC

# Build stage
FROM mcr.microsoft.com/dotnet/sdk:9.0-alpine AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

# Copy project files for layer caching
COPY ["src/Eventura.Web/Eventura.Web.csproj", "src/Eventura.Web/"]
COPY ["src/Eventura.Application/Eventura.Application.csproj", "src/Eventura.Application/"]
COPY ["src/Eventura.Domain/Eventura.Domain.csproj", "src/Eventura.Domain/"]
COPY ["src/Eventura.Infrastructure/Eventura.Infrastructure.csproj", "src/Eventura.Infrastructure/"]

# Restore with runtime optimization
RUN dotnet restore "src/Eventura.Web/Eventura.Web.csproj" \
    --runtime linux-musl-x64

# Copy source code
COPY src/ src/

# Build and publish with optimizations
WORKDIR "/src/src/Eventura.Web"
RUN dotnet publish "Eventura.Web.csproj" \
    -c $BUILD_CONFIGURATION \
    -o /app/publish \
    --no-restore \
    --runtime linux-musl-x64 \
    --self-contained false \
    /p:PublishReadyToRun=true \
    /p:DebugType=None \
    /p:DebugSymbols=false

# Final stage
FROM base AS final

# Copy published files with ownership
COPY --from=build --chown=eventura:eventura /app/publish /app

# Create logs directory and set permissions
RUN mkdir -p /app/logs \
    && chown -R eventura:eventura /app \
    && chmod -R 750 /app \
    && chmod -R 770 /app/logs

# Switch to non-root user
USER eventura

# Production environment variables
ENV ASPNETCORE_ENVIRONMENT=Production \
    ASPNETCORE_URLS=http://0.0.0.0:8080 \
    DOTNET_EnableDiagnostics=0 \
    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false \
    DOTNET_RUNNING_IN_CONTAINER=true \
    ASPNETCORE_FORWARDEDHEADERS_ENABLED=true

# Expose port
EXPOSE 8080

# Health check with optimized timings
HEALTHCHECK --interval=15s --timeout=5s --start-period=20s --retries=5 \
    CMD curl -f http://localhost:8080/health || exit 1

# Use exec form for proper signal handling
ENTRYPOINT ["dotnet", "Eventura.Web.dll"]
